#summary All zap builtin functions.

== $ ==
$(_o_)

Return a copy of _o_.

== tname ==
tname(_o_)

Return type name of _o_.

== refc ==
refc(_o_)

Return the reference count of _o_.

== print ==
print(_s_)

Print the string _s_ to standard output.  
Return the number of characters printed.

== printx ==
printx([_s1_ _o1_ _s2_ _o2_ ... _sn_ _on_])

Print the concatenation of the list items, with every even item passed through [BuiltinFunctions#repr repr]().  
Return the number of characters printed.  
Equivalent to:

{{{
\def printx(list)
    total 0
    repring FALSE
    \while list
        item pop(list)
        \if repring
            parcial print(repr(item))
        \else
            parcial print(item)
        total +(total parcial)
        repring not(repring)
    \ret total
}}}

== repr ==
repr(_x_)

Return the textual representation of _x_.

== len ==
len(_x_)

Return the length of _x_.  
If _x_ is a string, return the number of characters in _x_.  
If _x_ is a list, return the number of items in _x_.
If _x_ is a nable, return the number of names in _x_.
If _x_ is a dict, return the number of keys in _x_.

== arr ==
arr(_i_)
== concat ==
concat(_s1_ _s2_)
== join ==
join([_s1_ _s2_ ... _sn_] _sep_)
== push ==
push(_list_ _item_)
== peek ==
peek(_list_)
== pop ==
pop(_list_)
== append ==
append(_list_ _item_)
== set ==
set(_list_ _index_ _item_)
== get ==
get(_list_ _index_)
== ins ==
ins(_list_ _index_ _item_)
== ext ==
ext(_lista_ _listb_)
== rem ==
rem(_list_ _index_)
== has ==
has(_list_ _item_)
== setkey ==
setkey(_dict_ _key_ _value_)
== getkey ==
getkey(_dict_ _key_ _defval_)
== + ==
+(_a_ _b_)
== - ==
-(_a_ _b_)
== * ==
*(_a_ _b_)
== / ==
/(_a_ _b_)
== % ==
%(_a_ _b_)
== << ==
<<(_a_ _b_)
== >> ==
>>(_a_ _b_)
== ? ==
?(_o_)
== not ==
not(_o_)
== or ==
or(_a_ _b_)
== and ==
and(_a_ _b_)
== == ==
==(_a_ _b_)
== != ==
!=(_a_ _b_)
== < ==
<(_a_ _b_)
== > ==
>(_a_ _b_)
== <= ==
<=(_a_ _b_)
== >= ==
>=(_a_ _b_)
== node ==
node()
== any ==
any(_list_)
== all ==
all(_list_)
== range ==
range(_start_ _end_ _step_)
== arity ==
arity(_func_)