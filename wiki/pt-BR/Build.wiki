#summary Compilando zap.

= Introdução =

O interpretador zap pode ser facilmente compilado a partir do código fonte. São necessários um cliente Subversion e um compilador C ANSI. A ferramenta GNU make pode ser utilizada para facilitar o processo, e é especialmente indicada se você pretende fazer alterações e testes no código.

= Obtendo o código fonte =

Os arquivos de código fonte do interpretador zap são mantidos em um repositório Subversion (SVN). Para fazer o check out anônimo do repositório, transferindo os arquivos para o seu computador, deve-se usar o seguinte comando:

{{{
% svn checkout http://zap.googlecode.com/svn/trunk/ zap
}}}

Os arquivos serão copiados para o diretório zap, conforme especificado.

= Compilando =

Para compilar o código, mova para o subdiretório src:

{{{
% cd zap/src
}}}

A maneira mais conveniente de compilar os arquivos é invocando o GNU make. Caso você não possa utilizar o GNU make por algum motivo, veja mais abaixo como compilar manualmente.

== Através do Makefile ==

O arquivo Makefile em zap/src permite compilar o interpretador zap com apenas um comando. Em ambiente Linux normalmente o comando é o mais simples possível:

{{{
% make
}}}

Isto fará com que o shell e compilador padrões (e.g. bash e GCC) sejam utilizados.

No Windows, alguns cuidados extras são necessários. Deve-se especificar as variáveis SHELL, CC e BINEXT.
SHELL determina o ambiente shell utilizado e seu valor típico é "cmd".
CC determina o compilador utilizado. Se estiver utilizando o GCC da distribuição MinGW, seu valor típico é "C:\MinGW\bin\gcc" (ou apenas "gcc", caso o diretório "C:\MinGW\bin\" esteja listado na variável %PATH% do sistema operacional).
BINEXT determina a extensão do arquivo binário gerado e seu valor típico é ".exe"

Para invocar o GNU make no Windows, fornecendo os argumentos adequados, pode-se utilizar o comando típico:

{{{
% make SHELL=cmd CC=gcc BINEXT=.exe
}}}

Ou ainda salvar os valores dos argumentos em um arquivo de nome "env" (sem extensão), no diretório zap/src. O conteúdo de um "env" típico é listado abaixo.

{{{
SHELL = cmd
CC = gcc
BINEXT = .exe
RM = del
}}}

Este arquivo permite que o interpretador zap seja compilado no Windows de forma semelhante ao procedimento em ambiente Linux, apenas invocando o GNU make, sem argumentos. A variável RM será utilizada somente para chamadas de "make clean".

== Manualmente ==

Para compilar manualmente, é preciso gerar os arquivos objeto e ordem adequada, e linkeditá-los em seguida.
Supondo que o compilador utilizado é o GCC, os comandos são, em sequência:

{{{
% gcc -c -Wall -Werror -O2 -I include ztypes.c
% gcc -c -Wall -Werror -O2 -I include zerr.c
% gcc -c -Wall -Werror -O2 -I include zgc.c
% gcc -c -Wall -Werror -O2 -I include znone.c
% gcc -c -Wall -Werror -O2 -I include zbool.c
% gcc -c -Wall -Werror -O2 -I include zbyte.c
% gcc -c -Wall -Werror -O2 -I include zword.c
% gcc -c -Wall -Werror -O2 -I include zbytearray.c
% gcc -c -Wall -Werror -O2 -I include zbignum.c
% gcc -c -Wall -Werror -O2 -I include zlist.c
% gcc -c -Wall -Werror -O2 -I include zdict.c
% gcc -c -Wall -Werror -O2 -I include zfunc.c
% gcc -c -Wall -Werror -O2 -I include zobject.c
% gcc -c -Wall -Werror -O2 -I include zruntime.c
% gcc -c -Wall -Werror -O2 -I include zbuiltin.c
% gcc -c -Wall -Werror -O2 -I include zcpl_expr.c
% gcc -c -Wall -Werror -O2 -I include zcpl_mod.c
% gcc -c -Wall -Werror -O2 -I include zap.c
% gcc -o zap ztypes.o zerr.o zgc.o znone.o zbool.o zbyte.o zword.o zbytearray.o zbignum.o zlist.o zdict.o zfunc.o zobject.o zruntime.o zbuiltin.o zcpl_expr.o zcpl_mod.o zap.o
}}}

Pode ser necessário especificar a extensão do arquivo binário zap no último comando (e.g. "zap.exe").
É recomendável salvar estes comandos em um script, para facilitar possíveis repetições no processo.
